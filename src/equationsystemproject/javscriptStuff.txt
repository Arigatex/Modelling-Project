		
		//Solving the Equation System
		//Start of the copy-paste
		// solve A x = b using gaussiaon elimination
		/*
		function solveEquationSystem(matrix,vector_left,vector_right)
		{
		 var fMaxElem;
		 var fAcc;
		 var nodenumber = vector_left.length;
		 for(k=0; k<(nodenumber-1); k++) // base row of matrix
		  {
		    // search of line with max element
		   fMaxElem = Math.abs( matrix[k][k] );
		   m = k;
		   for(i=k+1; i<nodenumber; i++)
		    {
		     if(Math.abs(fMaxElem) < Math.abs(matrix[i][k]) )
		      {
		       fMaxElem = matrix[i][k];
		       m = i;
		      }
		    }
		    // permutation of base line (index k) and max element line(index m)
		   if(m != k)
		    {
		     for(i=k; i<nodenumber; i++)
		      {
		       fAcc               = matrix[k][i];
		       matrix[k][i] = matrix[m][i];
		       matrix[m][i] = fAcc;
		      }
		     fAcc = vector_right[k];
		     vector_right[k] = vector_right[m];
		     vector_right[m] = fAcc;
		    }
		   if( Math.abs(matrix[k][k]) < 1.e-10) alert("matrix singular "+k+" "+matrix[k][k]);// needs improvement !!!
		    // triangulation of matrix with coefficients
		   for(j=(k+1); j<nodenumber; j++) // current row of matrix
		    {
		     fAcc = - matrix[j][k] / matrix[k][k];
		     for(i=k; i<nodenumber; i++)
		      {
		       matrix[j][i] = matrix[j][i] + fAcc*matrix[k][i];
		      }
		     vector_right[j] = vector_right[j] + fAcc*vector_right[k]; // free member recalculation
		    }
		  }
		 for(k=(nodenumber-1); k>=0; k--)
		  {
		   vector_left[k] = vector_right[k];
		   for(i=(k+1); i<nodenumber; i++)
		    {
		     vector_left[k] -= (matrix[k][i]*vector_left[i]);
		    }
		   vector_left[k] = vector_left[k] / matrix[k][k];
		  }
		}
		 //End of copy-paste		

*/

